<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://oneseek.github.io</id>
    <title>OneSeek</title>
    <updated>2020-04-19T11:59:02.574Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://oneseek.github.io"/>
    <link rel="self" href="https://oneseek.github.io/atom.xml"/>
    <subtitle>Be a coder who can change the world</subtitle>
    <logo>https://oneseek.github.io/images/avatar.png</logo>
    <icon>https://oneseek.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, OneSeek</rights>
    <entry>
        <title type="html"><![CDATA[739. 每日温度]]></title>
        <id>https://oneseek.github.io/post/739-mei-ri-wen-du/</id>
        <link href="https://oneseek.github.io/post/739-mei-ri-wen-du/">
        </link>
        <updated>2020-04-19T07:21:09.000Z</updated>
        <content type="html"><![CDATA[<p>难度中等<br>
根据每日 气温 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。<br>
例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。<br>
提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p>
<h1 id="暴力循环">暴力循环</h1>
<pre><code>class Solution {
    public int[] dailyTemperatures(int[] T) {
        int l = T.length;
        int[] ans = new int[l];
        for(int i=0;i&lt;l;i++){
            int day=0;
            for(int j=i+1;j&lt;l;j++){
                day++;
                if(T[j]&gt;T[i]){
                    ans[i]=day;
                    break;
                }
            }
        }
        return ans;
    }
}
</code></pre>
<h1 id="栈">栈</h1>
<pre><code>class Solution {
    public int[] dailyTemperatures(int[] T) {
        int l = T.length;
        int[] ans = new int[l]; 
        Stack&lt;Integer&gt; stack = new Stack(); // 存放下标
        for(int i=0;i&lt;l;i++){
            while(!stack.empty()&amp;&amp;T[i]&gt;T[stack.peek()]){ // 和栈顶比较比栈顶大就计算栈顶元素的结果 否则 将元素下标入栈
                ans[stack.peek()]=i-stack.peek();
                stack.pop();
            }
            stack.push(i);
        }
        return ans;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[20. 有效的括号]]></title>
        <id>https://oneseek.github.io/post/20-you-xiao-de-gua-hao/</id>
        <link href="https://oneseek.github.io/post/20-you-xiao-de-gua-hao/">
        </link>
        <updated>2020-04-19T06:00:35.000Z</updated>
        <content type="html"><![CDATA[<p>难度 简单<br>
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>
左括号必须以正确的顺序闭合。<br>
注意空字符串可被认为是有效字符串。</p>
<p>示例 1:</p>
<p>输入: &quot;()&quot;<br>
输出: true<br>
示例 2:</p>
<p>输入: &quot;()[]{}&quot;<br>
输出: true<br>
示例 3:</p>
<p>输入: &quot;(]&quot;<br>
输出: false<br>
示例 4:</p>
<p>输入: &quot;([)]&quot;<br>
输出: false<br>
示例 5:</p>
<p>输入: &quot;{[]}&quot;<br>
输出: true</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/valid-parentheses<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<pre><code>class Solution {
    public boolean isValid(String s) {
        Stack&lt;Character&gt; str = new Stack();
        for(char c:s.toCharArray()){
            if(!str.empty()&amp;&amp;inverse(str.peek(),c)){
                str.pop();
            }else{
                str.push(c);
            }
        }
        return str.empty();
    }
    public boolean inverse(char c1,char c2){
        if(c2==')'){
            return c1=='(';
        }else if(c2==']'){
            return c1=='[';
        }else if(c2=='}'){
            return c1=='{';
        }
        return false;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[25. K 个一组翻转链表]]></title>
        <id>https://oneseek.github.io/post/25-k-ge-yi-zu-fan-zhuan-lian-biao/</id>
        <link href="https://oneseek.github.io/post/25-k-ge-yi-zu-fan-zhuan-lian-biao/">
        </link>
        <updated>2020-04-18T13:46:23.000Z</updated>
        <content type="html"><![CDATA[<p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。<br>
k 是一个正整数，它的值小于或等于链表的长度。<br>
如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p>示例：<br>
给你这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br>
当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>
当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>
<p>说明：<br>
你的算法只能使用常数的额外空间。<br>
你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/reverse-nodes-in-k-group<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>
/**</p>
<ul>
<li>Definition for singly-linked list.</li>
<li>public class ListNode {</li>
<li>
<pre><code>int val;
</code></pre>
</li>
<li>
<pre><code>ListNode next;
</code></pre>
</li>
<li>
<pre><code>ListNode(int x) { val = x; }
</code></pre>
</li>
<li>}<br>
*/</li>
</ul>
<pre><code>class Solution {
   public ListNode reverseKGroup(ListNode head, int k) {
       ListNode tail = head;
       for (int i = 0; i &lt; k; i++) {
           //剩余数量小于k的话，则不需要反转。
           if (tail == null) {
               return head;
           }
           tail = tail.next;
       }
       ListNode newHead = reverseK(head, k);
       head.next = reverseKGroup(tail, k);
       
       return newHead;
   }
   public ListNode reverseK(ListNode head, int k) {
       ListNode prev = null;
       ListNode curr = head;
       ListNode next = null;
       while(curr!=null&amp;&amp;k--&gt;0){
           next = curr.next;
           curr.next = prev;
           prev = curr;
           curr = next;
       }
       return prev;
   }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[242. 有效的字母异位词]]></title>
        <id>https://oneseek.github.io/post/242-you-xiao-de-zi-mu-yi-wei-ci/</id>
        <link href="https://oneseek.github.io/post/242-you-xiao-de-zi-mu-yi-wei-ci/">
        </link>
        <updated>2020-04-18T13:45:40.000Z</updated>
        <content type="html"><![CDATA[<p>简单题<br>
给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。<br>
示例 1:<br>
输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;<br>
输出: true<br>
示例 2:<br>
输入: s = &quot;rat&quot;, t = &quot;car&quot;<br>
输出: false<br>
说明:<br>
你可以假设字符串只包含小写字母。<br>
进阶:<br>
如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/valid-anagram<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<pre><code>class Solution {
    public boolean isAnagram(String s, String t) {
        int[] arr1 = new int[26];
        int[] arr2 = new int[26];
        for (char i : s.toCharArray()) {
            arr1[(int)i-97]++;
        }
        for (char i : t.toCharArray()) {
            arr2[(int)i-97]++;
        }
        for(int i=0;i&lt;26;i++){
            if(arr1[i]!=arr2[i]){
                return false;
            }
        }
        return true;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[idea maven 资源文件加载不到classes]]></title>
        <id>https://oneseek.github.io/post/idea-maven-zi-yuan-wen-jian-jia-zai-bu-dao-classes/</id>
        <link href="https://oneseek.github.io/post/idea-maven-zi-yuan-wen-jian-jia-zai-bu-dao-classes/">
        </link>
        <updated>2020-04-17T08:48:13.000Z</updated>
        <content type="html"><![CDATA[<p>没找到原因 有人说试idea的bug<br>
解决方法：1、手动复制<br>
2、删除iml文件中的 <code>org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=&quot;true&quot;</code></p>
]]></content>
    </entry>
</feed>