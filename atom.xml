<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://oneseek.github.io</id>
    <title>OneSeek</title>
    <updated>2020-03-20T15:08:39.389Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://oneseek.github.io"/>
    <link rel="self" href="https://oneseek.github.io/atom.xml"/>
    <subtitle>Be a coder who can change the world</subtitle>
    <logo>https://oneseek.github.io/images/avatar.png</logo>
    <icon>https://oneseek.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, OneSeek</rights>
    <entry>
        <title type="html"><![CDATA[算法训练-审美课]]></title>
        <id>https://oneseek.github.io/post/suan-fa-xun-lian-shen-mei-ke/</id>
        <link href="https://oneseek.github.io/post/suan-fa-xun-lian-shen-mei-ke/">
        </link>
        <updated>2020-03-20T13:57:14.000Z</updated>
        <content type="html"><![CDATA[<p>/*<br>
试题 算法训练 审美课</p>
<p>资源限制<br>
时间限制：1.0s   内存限制：256.0MB<br>
问题描述<br>
　　《审美的历程》课上有n位学生，帅老师展示了m幅画，<br>
其中有些是梵高的作品，另外的都出自五岁小朋友之手。<br>
老师请同学们分辨哪些画的作者是梵高，但是老师自己<br>
并没有答案，因为这些画看上去都像是小朋友画的……<br>
老师只想知道，有多少对同学给出的答案完全相反，<br>
这样他就可以用这个数据去揭穿披着皇帝新衣的抽象艺术了<br>
（支持帅老师<sup>_</sup>）。<br>
　　答案完全相反是指对每一幅画的判断都相反。<br>
输入格式<br>
　　第一行两个数n和m，表示学生数和图画数；<br>
　　接下来是一个n<em>m的01矩阵A：<br>
　　如果aij=0，表示学生i觉得第j幅画是小朋友画的；<br>
　　如果aij=1，表示学生i觉得第j幅画是梵高画的。<br>
输出格式<br>
　　输出一个数ans：表示有多少对同学的答案完全相反。<br>
样例输入<br>
3 2<br>
1 0<br>
0 1<br>
1 0<br>
样例输出<br>
2<br>
样例说明<br>
　　同学1和同学2的答案完全相反；<br>
　　同学2和同学3的答案完全相反；<br>
　　所以答案是2。<br>
数据规模和约定<br>
　　对于50%的数据：n&lt;=1000；<br>
　　对于80%的数据：n&lt;=10000；<br>
　　对于100%的数据：n&lt;=50000，m&lt;=20。</em>/</p>
<pre><code>//直接暴力-超时
#include &lt;iostream&gt;
using namespace std;
int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;
    int a[n][m];
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; m; j++) {
            cin &gt;&gt; a[i][j];
        }
    }
    int ans = 0;
    for (int i = 0; i &lt; n; i++) {
        for (int k = i + 1; k &lt; n; k++) {
            for (int j = 0; j &lt; m; j++) {
                if (a[i][j] == a[k][j]) {
                    break;
                }
                if (j == m - 1){
                    ans++;
                }        
            }
        }
    }
    cout &lt;&lt; ans;
    return 0;
}
</code></pre>
<pre><code>#include &lt;iostream&gt;
using namespace std;
int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;
    int a[n];
    for (int i = 0; i &lt; n; i++) {
        a[i] = 0;
        for (int j = 0; j &lt; m; j++) {
            int k;
            cin &gt;&gt; k;
            a[i] = a[i] * 10 + k;
        }
    }
    int ans = 0;
    int l = 0;
    for (int j = 0; j &lt; m; j++) {
        l = l * 10 + 1;
    }
    // cout &lt;&lt; l &lt;&lt; endl;
    for (int i = 0; i &lt; n; i++) {
        for (int k = i + 1; k &lt; n; k++) {
            int x = a[i] + a[k];
            if (x == l) {
                ans++;
            }
        }
        
    }
    cout &lt;&lt; ans;
    return 0;
}
</code></pre>
<p>1101+0010=1111 全部相反 两数相加等于全一 这样时间复杂度会下降 但是依旧超时</p>
<p>看网上的解析别人有用散列 改了下果然过了 这也是之前忽略的一个地方 明天再好好看看相关的知识点</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
using namespace std;
int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;
    map&lt;int, int&gt; num;
    for (int i = 0; i &lt; n; i++) {
        int t = 0;
        for (int j = 0; j &lt; m; j++) {
            int k;
            cin &gt;&gt; k;
            t = t * 10 + k;
        }
        num[t]++;
    }
    
    int ans = 0;
    int l = 0;
    for (int j = 0; j &lt; m; j++) {
        l = l * 10 + 1;
    }
    for (map&lt;int, int&gt;::iterator it = num.begin(); it != num.end(); ++it){
        for (map&lt;int, int&gt;::iterator it2 = num.begin(); it2 != num.end(); ++it2){
            if(it-&gt;first+it2-&gt;first==l){
                ans += it-&gt;second * it2-&gt;second;
            }
        }
    }
    
    cout &lt;&lt; ans;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法训练 大等于n的最小完全平方数]]></title>
        <id>https://oneseek.github.io/post/suan-fa-xun-lian-da-deng-yu-n-de-zui-xiao-wan-quan-ping-fang-shu/</id>
        <link href="https://oneseek.github.io/post/suan-fa-xun-lian-da-deng-yu-n-de-zui-xiao-wan-quan-ping-fang-shu/">
        </link>
        <updated>2020-03-19T13:56:06.000Z</updated>
        <content type="html"><![CDATA[<pre><code>/*
试题 算法训练 大等于n的最小完全平方数

资源限制
时间限制：1.0s   内存限制：256.0MB
问题描述
　　输出大等于n的最小的完全平方数。
　　若一个数能表示成某个自然数的平方的形式，则称这个数为完全平方数
　　Tips：注意数据范围
输入格式
　　一个整数n
输出格式
　　大等于n的最小的完全平方数
样例输入
71711
样例输出
71824
数据规模和约定
　　n是32位有符号整数
*/
#include &lt;cmath&gt;
#include &lt;cstdio&gt;
using namespace std;
int main() {
    long long n;
    scanf(&quot;%lld&quot;, &amp;n);
    if (n &lt; 0) {
        printf(&quot;%d&quot;, 0);
    }
    else {
        long long i = sqrt(n);
        while (i*i &lt; n) {
			i++;				
		}
        printf(&quot;%lld&quot;, i * i);
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[域名可以ping通 但是网页显示无法访问]]></title>
        <id>https://oneseek.github.io/post/yu-ming-ke-yi-ping-tong-dan-shi-wang-ye-xian-shi-wu-fa-fang-wen/</id>
        <link href="https://oneseek.github.io/post/yu-ming-ke-yi-ping-tong-dan-shi-wang-ye-xian-shi-wu-fa-fang-wen/">
        </link>
        <updated>2020-03-19T13:10:41.000Z</updated>
        <content type="html"><![CDATA[<p>原因可能是 之前的网页缓存和ip缓存没清理，之前也试过清理但是还是不行，早上出的问题，隔了一个下午，就可以用了，也有可能是服务器配置出了问题，中间也重启了几次服务器。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nginx 资源重定向错误]]></title>
        <id>https://oneseek.github.io/post/nginx-zi-yuan-chong-ding-xiang-cuo-wu/</id>
        <link href="https://oneseek.github.io/post/nginx-zi-yuan-chong-ding-xiang-cuo-wu/">
        </link>
        <updated>2020-03-18T13:12:34.000Z</updated>
        <content type="html"><![CDATA[<p>原因 leanote 页面使用的是绝对 路径 导致 二级目录访问 会跳转到 根目录<br>
例如 localhost/leanote/index 变成 localhost/index</p>
<p>解决方法：<br>
用sub_filter 将请求的资源变成 相对路径<br>
可能会造成从第三方网址的资源不可用 但是暂时只能这样解决了</p>
<pre><code>sub_filter 'src=&quot;/' 'src=&quot;./'; 
sub_filter 'href=&quot;/' 'href=&quot;./'; 
 sub_filter_once off;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nginx 反向代理]]></title>
        <id>https://oneseek.github.io/post/nginx-sub_filter/</id>
        <link href="https://oneseek.github.io/post/nginx-sub_filter/">
        </link>
        <updated>2020-03-18T05:30:18.000Z</updated>
        <content type="html"><![CDATA[<p>配置leanote时，希望把二级目录 匹配到端口 发现只能进首页其他的url都不对</p>
<p>原因：连接没有重定向到 二级目录下</p>
<p>增加 sub_filter 属性能让首页的资源加载到 但是点击连接别的页面 却被从定向到根目录</p>
<pre><code>listen 80;
        server_name localhost;

        location /leanote/ {
            proxy_pass http://localhost:9000/;
            sub_filter / /leanote;
        }
</code></pre>
<p>解决： 使用代理 把资源匹配到正确路径</p>
<pre><code>location / {
         proxy_pass http://localhost:9000/;
        }
        location /leanote/ {
            proxy_pass http://localhost:9000/;
        }
}
</code></pre>
<p>但是这样</p>
<p>参考文章 ： https://blog.csdn.net/djfjkj52/article/details/96426979</p>
]]></content>
    </entry>
</feed>