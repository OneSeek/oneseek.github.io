<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://oneseek.github.io</id>
    <title>OneSeek</title>
    <updated>2020-04-21T09:05:03.856Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://oneseek.github.io"/>
    <link rel="self" href="https://oneseek.github.io/atom.xml"/>
    <subtitle>Be a coder who can change the world</subtitle>
    <logo>https://oneseek.github.io/images/avatar.png</logo>
    <icon>https://oneseek.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, OneSeek</rights>
    <entry>
        <title type="html"><![CDATA[39. 组合总和 难度中等]]></title>
        <id>https://oneseek.github.io/post/39-zu-he-zong-he-nan-du-zhong-deng/</id>
        <link href="https://oneseek.github.io/post/39-zu-he-zong-he-nan-du-zhong-deng/">
        </link>
        <updated>2020-04-21T09:03:02.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的数字可以无限制重复被选取。</p>
<p>说明：</p>
<p>所有数字（包括 target）都是正整数。<br>
解集不能包含重复的组合。 <br>
示例 1:</p>
<p>输入: candidates = [2,3,6,7], target = 7,<br>
所求解集为:<br>
[<br>
[7],<br>
[2,2,3]<br>
]<br>
示例 2:</p>
<p>输入: candidates = [2,3,5], target = 8,<br>
所求解集为:<br>
[<br>
  [2,2,2,2],<br>
  [2,3,3],<br>
  [3,5]<br>
]</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/combination-sum<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<pre><code>class Solution {
    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();
    List&lt;Integer&gt; solution = new ArrayList&lt;&gt;();
    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) {
        backtrack(candidates,target,0);
        return res;
    }
    void backtrack(int[] candidates, int target, int start) {
        if (target &lt; 0) {
            return;
        }
        if (target == 0) {
            res.add(new ArrayList&lt;&gt;(solution)); // 要用一个new ArrayList&lt;&gt;() 否则之后的clear会清除 因为存的是数组引用
        }

        for (int i = start; i &lt; candidates.length; i++) {
            solution.add(candidates[i]);
            backtrack(candidates, target - candidates[i], i);
            if (solution.size() &gt; 0) {
                solution.remove(solution.size() - 1); //回溯之后数组内 值也要匹配删除
            }
        }

    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[91. 解码方法 难度中等]]></title>
        <id>https://oneseek.github.io/post/91-jie-ma-fang-fa-nan-du-zhong-deng/</id>
        <link href="https://oneseek.github.io/post/91-jie-ma-fang-fa-nan-du-zhong-deng/">
        </link>
        <updated>2020-04-20T08:56:40.000Z</updated>
        <content type="html"><![CDATA[<p>一条包含字母 A-Z 的消息通过以下方式进行了编码：<br>
'A' -&gt; 1<br>
'B' -&gt; 2<br>
...<br>
'Z' -&gt; 26<br>
给定一个只包含数字的非空字符串，请计算解码方法的总数。<br>
示例 1:<br>
输入: &quot;12&quot;<br>
输出: 2<br>
解释: 它可以解码为 &quot;AB&quot;（1 2）或者 &quot;L&quot;（12）。<br>
示例 2:<br>
输入: &quot;226&quot;<br>
输出: 3<br>
解释: 它可以解码为 &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), 或者 &quot;BBF&quot; (2 2 6) 。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/decode-ways<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<pre><code>class Solution {
    public int numDecodings(String s) {
        char[] c = s.toCharArray();
    
        int ans = decodings(c,c.length-1);
        
        return ans;
    }
    // 递归decodings(i) = decodings(i-1) + decoding(i-2)
    public int decodings(char[] c,int i){
        //特殊情况
        if(c[0]=='0'){ //第一个不能是0
            return 0;
        }
        if(i&gt;=2&amp;&amp;c[i]=='0'&amp;&amp;c[i-1]=='0'){//不能有连续两个0
            return 0;
        }
        //边界 
        if(i&lt;=0){
            return 1;
        }
        // decodings(i) = decodings(i-1) + decoding(i-2)
        int ans = 0;
        if(c[i]!='0'){ // c[i]为0时,不计算decodings(i-1),直接算decodings(i-2)
            ans = decodings(c, i-1);
        }
        if((c[i-1]=='2'&amp;&amp;c[i]&lt;'7')||c[i-1]=='1'){ // 计算decodings(i-2)
            ans += decodings(c, i-2);
        }
        return ans;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[739. 每日温度]]></title>
        <id>https://oneseek.github.io/post/739-mei-ri-wen-du/</id>
        <link href="https://oneseek.github.io/post/739-mei-ri-wen-du/">
        </link>
        <updated>2020-04-19T07:21:09.000Z</updated>
        <content type="html"><![CDATA[<p>难度中等<br>
根据每日 气温 列表，请重新生成一个列表，对应位置的输出是需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。<br>
例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。<br>
提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p>
<h1 id="暴力循环">暴力循环</h1>
<pre><code>class Solution {
    public int[] dailyTemperatures(int[] T) {
        int l = T.length;
        int[] ans = new int[l];
        for(int i=0;i&lt;l;i++){
            int day=0;
            for(int j=i+1;j&lt;l;j++){
                day++;
                if(T[j]&gt;T[i]){
                    ans[i]=day;
                    break;
                }
            }
        }
        return ans;
    }
}
</code></pre>
<h1 id="栈">栈</h1>
<pre><code>class Solution {
    public int[] dailyTemperatures(int[] T) {
        int l = T.length;
        int[] ans = new int[l]; 
        Stack&lt;Integer&gt; stack = new Stack(); // 存放下标
        for(int i=0;i&lt;l;i++){
            while(!stack.empty()&amp;&amp;T[i]&gt;T[stack.peek()]){ // 和栈顶比较比栈顶大就计算栈顶元素的结果 否则 将元素下标入栈
                ans[stack.peek()]=i-stack.peek();
                stack.pop();
            }
            stack.push(i);
        }
        return ans;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[20. 有效的括号]]></title>
        <id>https://oneseek.github.io/post/20-you-xiao-de-gua-hao/</id>
        <link href="https://oneseek.github.io/post/20-you-xiao-de-gua-hao/">
        </link>
        <updated>2020-04-19T06:00:35.000Z</updated>
        <content type="html"><![CDATA[<p>难度 简单<br>
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>
左括号必须以正确的顺序闭合。<br>
注意空字符串可被认为是有效字符串。</p>
<p>示例 1:</p>
<p>输入: &quot;()&quot;<br>
输出: true<br>
示例 2:</p>
<p>输入: &quot;()[]{}&quot;<br>
输出: true<br>
示例 3:</p>
<p>输入: &quot;(]&quot;<br>
输出: false<br>
示例 4:</p>
<p>输入: &quot;([)]&quot;<br>
输出: false<br>
示例 5:</p>
<p>输入: &quot;{[]}&quot;<br>
输出: true</p>
<p>来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/valid-parentheses<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<pre><code>class Solution {
    public boolean isValid(String s) {
        Stack&lt;Character&gt; str = new Stack();
        for(char c:s.toCharArray()){
            if(!str.empty()&amp;&amp;inverse(str.peek(),c)){
                str.pop();
            }else{
                str.push(c);
            }
        }
        return str.empty();
    }
    public boolean inverse(char c1,char c2){
        if(c2==')'){
            return c1=='(';
        }else if(c2==']'){
            return c1=='[';
        }else if(c2=='}'){
            return c1=='{';
        }
        return false;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[25. K 个一组翻转链表]]></title>
        <id>https://oneseek.github.io/post/25-k-ge-yi-zu-fan-zhuan-lian-biao/</id>
        <link href="https://oneseek.github.io/post/25-k-ge-yi-zu-fan-zhuan-lian-biao/">
        </link>
        <updated>2020-04-18T13:46:23.000Z</updated>
        <content type="html"><![CDATA[<p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。<br>
k 是一个正整数，它的值小于或等于链表的长度。<br>
如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p>示例：<br>
给你这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br>
当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>
当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>
<p>说明：<br>
你的算法只能使用常数的额外空间。<br>
你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。<br>
来源：力扣（LeetCode）<br>
链接：https://leetcode-cn.com/problems/reverse-nodes-in-k-group<br>
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>
/**</p>
<ul>
<li>Definition for singly-linked list.</li>
<li>public class ListNode {</li>
<li>
<pre><code>int val;
</code></pre>
</li>
<li>
<pre><code>ListNode next;
</code></pre>
</li>
<li>
<pre><code>ListNode(int x) { val = x; }
</code></pre>
</li>
<li>}<br>
*/</li>
</ul>
<pre><code>class Solution {
   public ListNode reverseKGroup(ListNode head, int k) {
       ListNode tail = head;
       for (int i = 0; i &lt; k; i++) {
           //剩余数量小于k的话，则不需要反转。
           if (tail == null) {
               return head;
           }
           tail = tail.next;
       }
       ListNode newHead = reverseK(head, k);
       head.next = reverseKGroup(tail, k);
       
       return newHead;
   }
   public ListNode reverseK(ListNode head, int k) {
       ListNode prev = null;
       ListNode curr = head;
       ListNode next = null;
       while(curr!=null&amp;&amp;k--&gt;0){
           next = curr.next;
           curr.next = prev;
           prev = curr;
           curr = next;
       }
       return prev;
   }
}
</code></pre>
]]></content>
    </entry>
</feed>